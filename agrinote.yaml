swagger: '2.0'
info:
  description: 這是阿龜誌 API 的說明文件
  version: 1.0.0
  title: 阿龜誌 AgriNote
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: tuvix@beehivedt.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: api.agrinote.beehivedt.com
basePath: /v1
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: store
    description: Access to Petstore orders
  - name: user
    description: 使用者帳號相關操作（**完成**）
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
schemes:
  - http
paths:
  /field:
    post:
      tags:
        - pet
      summary: 新增一筆農田
      description: 新增一筆農田記錄
      operationId: addField
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Pet object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Field'
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: ''
      operationId: updatePet
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Pet object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Pet'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      produces:
        - application/xml
        - application/json
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use        
        tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      produces:
        - application/xml
        - application/json
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      deprecated: true
  '/pet/{petId}':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updatePetWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          type: integer
          format: int64
        - name: name
          in: formData
          description: Updated name of the pet
          required: false
          type: string
        - name: status
          in: formData
          description: Updated status of the pet
          required: false
          type: string
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: ''
      operationId: deletePet
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  '/pet/{petId}/uploadImage':
    post:
      tags:
        - pet
      summary: uploads an image
      description: ''
      operationId: uploadFile
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          type: integer
          format: int64
        - name: additionalMetadata
          in: formData
          description: Additional data to pass to server
          required: false
          type: string
        - name: file
          in: formData
          description: file to upload
          required: false
          type: file
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: ''
      operationId: placeOrder
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: order placed for purchasing the pet
          required: true
          schema:
            $ref: '#/definitions/Order'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid Order
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.        
        Other values will generated exceptions
      operationId: getOrderById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          type: integer
          maximum: 10
          minimum: 1
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.        
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      produces:
        - application/xml
        - application/json
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          type: integer
          minimum: 1
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /users:
    get:
      tags:
        - user
      summary: 使用者列表
      description: 取得使用者列表及內容
      parameters:
        - name: pageSize
          in: query
          description: 每一頁要傳回的使用者數量
          type: integer
        - name: pageNumber
          in: query
          description: 頁數
          type: integer
      responses:
        '200':
          description: 使用者列表
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      tags:
        - user
      summary: 使用者註冊
      description: 建立新的使用者，透過註冊程序送過來的資料
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: 建立一個使用者物件
          required: true
          schema:
            $ref: '#/definitions/Register'
      responses:
        default:
          description: 註冊成功
  /users/login:
    get:
      tags:
        - user
      summary: 使用者系統登入
      description: ''
      operationId: loginUser
      produces:
        - application/json
      parameters:
        - name: username
          in: query
          description: 登入的使用者名稱
          required: true
          type: string
        - name: password
          in: query
          description: 使用者登入密碼
          required: true
          type: string
      responses:
        '200':
          description: 成功登入
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: 錯誤的帳號或密碼
  /users/logout:
    get:
      tags:
        - user
      summary: 登出目前的使用者Session
      description: 登出現在登入狀態的使用者
      operationId: logoutUser
      produces:
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/users/{username}':
    get:
      tags:
        - user
      summary: 取得某位使用者資訊
      description: 取得指定使用者名稱的資訊內容
      operationId: getUserByName
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: 查詢使用者名稱
          required: true
          type: string
      responses:
        '200':
          description: 成功
          schema:
            $ref: '#/definitions/User'
        '400':
          description: 提供使用者名稱無效
        '404':
          description: 找不到使用者
    put:
      tags:
        - user
      summary: 更新使用者資訊
      description: 只有登入的使用者能夠修改自己的資料
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: 要修改的使用者帳號名稱
          required: true
          type: string
        - in: body
          name: body
          description: 更新使用物件
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: 提供使用者名稱無效
        '404':
          description: 找不到使用者
    delete:
      tags:
        - user
      summary: 刪除使用者
      description: 只有登入的使用者及能夠修改自己的資料
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: 要刪除的使用者帳號名稱
          required: true
          type: string
      responses:
        '400':
          description: 提供使用者名稱無效
        '404':
          description: 找不到使用者
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:pets': modify pets in your account
      'read:pets': read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Field:
    type: object
    properties:
      field_id:
        type: integer
        format: int64
      user:
        $ref: '#/definitions/User'
      name:
        type: string
      lan_no:
        type: string
        description: 地號
      address:
        type: string
      longitude:
        type: number
        format: float
        description: 經度
      latitude:
        type: number
        format: float
        description: 緯度
      pic:
        type: string
        format: byte
    required:
      - name
      - address
      - longitude
      - latitude
  Period:
    type: object
    properties:
      period_id:
        type: integer
        format: int64
      field_id:
        type: integer
        format: int64
        description: 農田編號
      crop_id:
        type: integer
        format: int64
        description: 農作物編號
      start_date:
        type: string
        format: date
        description: 開始日期
      complete:
        type: boolean
        default: false
        description: 期作完成與否，完成後不出現
      pic:
        type: string
        format: byte
        description: 農作物照片
  Crop:
    type: object
    properties:
      crop_id:
        type: integer
        format: int64
      gs1_id:
        type: integer
        format: int32
        description: 農產品編碼
      category:
        type: string
        description: 作物別
      item:
        type: string
        description: 品項
      operate_mode:
        type: string
        description: 工作方式
      breed:
        type: string
        description: 品種
  Journal:
    type: object
    description: 日誌記錄
    properties:
      journal_id:
        type: integer
        format: int64
      period_id:
        type: integer
        format: int64
        description: 期作編號
      record_time:
        type: string
        format: date-time
        description: 記錄時間
      category:
        type: integer
        format: int32
        description: 記錄類別
      task_id:
        type: integer
        format: int64
        description: 工作項目
      amount:
        type: integer
        format: int32
        description: 數量
      unit:
        type: string
        description: 單位
      material_id:
        type: integer
        format: int64
        description: 資材編號
      work_time:
        type: integer
        format: int32
        description: 工時
      cost:
        type: integer
        format: int32
        description: 成本
      pic:
        type: string
        format: byte
        description: 記錄照片
  Task:
    type: object
    description: 工作項目
    properties:
      task_id:
        type: integer
        format: int64
      task_name:
        type: string
        description: 工作項目
      task_description:
        type: string
        description: 工作項目說明
      parent_task_id:
        type: integer
        format: int64
        description: 工作父項目
  Material:
    type: object
    description: 使用資材
    properties:
      material_id:
        type: integer
        format: int64
      material_type:
        type: integer
        format: int32
        description: '資材類別 (1:有機 2:化學 3:其他)'
      name:
        type: string
        description: 資材名稱
  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      petId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
          - placed
          - approved
          - delivered
      complete:
        type: boolean
        default: false
    xml:
      name: Order
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Category
  Register:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: Register
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Tag
  Pet:
    type: object
    required:
      - name
      - photoUrls
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: '#/definitions/Category'
      name:
        type: string
        example: doggie
      photoUrls:
        type: array
        xml:
          name: photoUrl
          wrapped: true
        items:
          type: string
      tags:
        type: array
        xml:
          name: tag
          wrapped: true
        items:
          $ref: '#/definitions/Tag'
      status:
        type: string
        description: pet status in the store
        enum:
          - available
          - pending
          - sold
    xml:
      name: Pet
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
